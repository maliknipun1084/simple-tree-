#include <iostream>
#include "BinaryTreeNode.h"
#include "BinarySearchTree.h"
#include <queue>
using namespace std;
}

BinaryTreeNode<int>* findNode(BinaryTreeNode<int>* root, int data) {
	if (root == NULL) {
		return NULL;
	}

	if (root->data == data) {
		return root;
	} else if (data < root->data) {
		return findNode(root->left, data);
	} else {
		return findNode(root->right, data);
	}
}
void printBetweenK1K2(BinaryTreeNode<int>* root, int k1, int k2) {// 1st
	if (root == NULL) {
		return;
	}

	if (root->data >= k1 && root->data <= k2) {
		cout << root->data << endl;
	}
	if (root->data > k1) {
		printBetweenK1K2(root->left, k1, k2);
	}

	if (root->data <= k2) {
		printBetweenK1K2(root->right, k1, k2);
	}
}

int maximum(BinaryTreeNode<int>* root) {
	if (root == NULL) {
		return INT_MIN;
	}
	return max(root->data, max(maximum(root->left), maximum(root->right)));// 3 time we are calling 
}

int minimum(BinaryTreeNode<int>* root) {
	if (root == NULL) {
		return INT_MAX;
	}
	return min(root->data, min(minimum(root->left), minimum(root->right)));
}

bool isBST(BinaryTreeNode<int>* root) {// 1st case              =we are checking if bt is bst 
	if (root == NULL) {
		return true;// we will 4 case we will calculate maximum of left and right half .we will call recurssively for both half 
	}

	int leftMax = maximum(root->left);
	int rightMin = minimum(root->right);
	bool output = (root->data > leftMax) && (root->data <= rightMin) && isBST(root->left) && isBST(root->right);
	return output;
}

class IsBSTReturn {// we have created class of isbst return 
	public:
		bool isBST;
		int minimum;
		int maximum;
};

IsBSTReturn isBST2(BinaryTreeNode<int>* root) {// we are making constructor 
	if (root == NULL) {// 
		IsBSTReturn output;
		output.isBST = true;
		output.minimum = INT_MAX;
		output.maximum = INT_MIN;
		return output;
	}
	IsBSTReturn leftOutput = isBST2(root->left);  
	IsBSTReturn rightOutput = isBST2(root->right);
	int minimum = min(root->data, min(leftOutput.minimum, rightOutput.minimum));
	int maximum = max(root->data, max(leftOutput.maximum, rightOutput.maximum));
	bool isBSTFinal = (root->data > leftOutput.maximum) && (root->data <= rightOutput.minimum) &&
		leftOutput.isBST && rightOutput.isBST;
	IsBSTReturn output;
	output.minimum = minimum;
	output.maximum = maximum;
	output.isBST = isBSTFinal;
	return output;
}

bool isBST3(BinaryTreeNode<int>* root, int min = INT_MIN, int max = INT_MAX) {
	if (root == NULL) {
		return true;
	}
	if (root->data < min || root->data > max) {
		return false;
	}
	bool isLeftOk = isBST3(root->left, min, root->data - 1);
	bool isRightOk = isBST3(root->right, root->data, max);
	return isLeftOk && isRightOk;
}

// 1 2 3 4 5 6 7 -1 -1 -1 -1 8 9 -1 -1 -1 -1 -1 -1
int main() {
	BinaryTreeNode<int>* root = takeInputLevelWise();
	cout << isBST(root) << endl;
	delete root;
}

#include <iostream>
#include "BinaryTreeNode.h"
#include "BinarySearchTree.h"
#include <queue>
using namespace std;
}

BinaryTreeNode<int>* findNode(BinaryTreeNode<int>* root, int data) {
	if (root == NULL) {
		return NULL;
	}

	if (root->data == data) {
		return root;
	} else if (data < root->data) {
		return findNode(root->left, data);
	} else {
		return findNode(root->right, data);
	}
}
void printBetweenK1K2(BinaryTreeNode<int>* root, int k1, int k2) {// 1st
	if (root == NULL) {
		return;
	}

	if (root->data >= k1 && root->data <= k2) {
		cout << root->data << endl;
	}
	if (root->data > k1) {
		printBetweenK1K2(root->left, k1, k2);
	}

	if (root->data <= k2) {
		printBetweenK1K2(root->right, k1, k2);
	}
}

int maximum(BinaryTreeNode<int>* root) {
	if (root == NULL) {
		return INT_MIN;
	}
	return max(root->data, max(maximum(root->left), maximum(root->right)));// 3 time we are calling 
}

int minimum(BinaryTreeNode<int>* root) {
	if (root == NULL) {
		return INT_MAX;
	}
	return min(root->data, min(minimum(root->left), minimum(root->right)));
}

bool isBST(BinaryTreeNode<int>* root) {// 1st case              =we are checking if bt is bst 
	if (root == NULL) {
		return true;// we will 4 case we will calculate maximum of left and right half .we will call recurssively for both half 
	}

	int leftMax = maximum(root->left);
	int rightMin = minimum(root->right);
	bool output = (root->data > leftMax) && (root->data <= rightMin) && isBST(root->left) && isBST(root->right);
	return output;
}

class IsBSTReturn {// we have created class of isbst return 
	public:
		bool isBST;
		int minimum;
		int maximum;
};

IsBSTReturn isBST2(BinaryTreeNode<int>* root) {// we are making constructor 
	if (root == NULL) {// 
		IsBSTReturn output;
		output.isBST = true;
		output.minimum = INT_MAX;
		output.maximum = INT_MIN;
		return output;
	}
	IsBSTReturn leftOutput = isBST2(root->left);  
	IsBSTReturn rightOutput = isBST2(root->right);
	int minimum = min(root->data, min(leftOutput.minimum, rightOutput.minimum));
	int maximum = max(root->data, max(leftOutput.maximum, rightOutput.maximum));
	bool isBSTFinal = (root->data > leftOutput.maximum) && (root->data <= rightOutput.minimum) &&
		leftOutput.isBST && rightOutput.isBST;
	IsBSTReturn output;
	output.minimum = minimum;
	output.maximum = maximum;
	output.isBST = isBSTFinal;
	return output;
}

bool isBST3(BinaryTreeNode<int>* root, int min = INT_MIN, int max = INT_MAX) {
	if (root == NULL) {
		return true;
	}
	if (root->data < min || root->data > max) {
		return false;
	}
	bool isLeftOk = isBST3(root->left, min, root->data - 1);
	bool isRightOk = isBST3(root->right, root->data, max);
	return isLeftOk && isRightOk;
}

// 1 2 3 4 5 6 7 -1 -1 -1 -1 8 9 -1 -1 -1 -1 -1 -1
int main() {
	BinaryTreeNode<int>* root = takeInputLevelWise();
	cout << isBST(root) << endl;
	delete root;
}

